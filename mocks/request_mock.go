// Code generated by MockGen. DO NOT EDIT.
// Source: web/request.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProxy is a mock of Proxy interface.
type MockProxy struct {
	ctrl     *gomock.Controller
	recorder *MockProxyMockRecorder
}

// MockProxyMockRecorder is the mock recorder for MockProxy.
type MockProxyMockRecorder struct {
	mock *MockProxy
}

// NewMockProxy creates a new mock instance.
func NewMockProxy(ctrl *gomock.Controller) *MockProxy {
	mock := &MockProxy{ctrl: ctrl}
	mock.recorder = &MockProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxy) EXPECT() *MockProxyMockRecorder {
	return m.recorder
}

// BuyGood mocks base method.
func (m *MockProxy) BuyGood(arg0 string, arg1 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyGood", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyGood indicates an expected call of BuyGood.
func (mr *MockProxyMockRecorder) BuyGood(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyGood", reflect.TypeOf((*MockProxy)(nil).BuyGood), arg0, arg1)
}

// GetFlightPlan mocks base method.
func (m *MockProxy) GetFlightPlan(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightPlan", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightPlan indicates an expected call of GetFlightPlan.
func (mr *MockProxyMockRecorder) GetFlightPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightPlan", reflect.TypeOf((*MockProxy)(nil).GetFlightPlan), arg0)
}

// GetMarketplaceProducts mocks base method.
func (m *MockProxy) GetMarketplaceProducts(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketplaceProducts", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketplaceProducts indicates an expected call of GetMarketplaceProducts.
func (mr *MockProxyMockRecorder) GetMarketplaceProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketplaceProducts", reflect.TypeOf((*MockProxy)(nil).GetMarketplaceProducts), arg0)
}

// GetShipInfo mocks base method.
func (m *MockProxy) GetShipInfo() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShipInfo")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShipInfo indicates an expected call of GetShipInfo.
func (mr *MockProxyMockRecorder) GetShipInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShipInfo", reflect.TypeOf((*MockProxy)(nil).GetShipInfo))
}

// SellGood mocks base method.
func (m *MockProxy) SellGood(arg0 string, arg1 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellGood", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SellGood indicates an expected call of SellGood.
func (mr *MockProxyMockRecorder) SellGood(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellGood", reflect.TypeOf((*MockProxy)(nil).SellGood), arg0, arg1)
}

// SetNewFlightPlan mocks base method.
func (m *MockProxy) SetNewFlightPlan(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewFlightPlan", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNewFlightPlan indicates an expected call of SetNewFlightPlan.
func (mr *MockProxyMockRecorder) SetNewFlightPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewFlightPlan", reflect.TypeOf((*MockProxy)(nil).SetNewFlightPlan), arg0)
}
